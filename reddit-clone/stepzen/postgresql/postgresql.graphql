type Comments {
  created_at: DateTime
  id: ID!
  posts_id: ID
  text: String
  usename: String
}

type Post {
  body: String
  created_at: DateTime
  id: ID!
  image: String
  subraddit_id: ID
  title: String
  username: String
}

type Subreddit {
  created_at: DateTime
  id: ID!
  topic: String
}

type Vote {
  created_at: DateTime
  id: ID!
  post_id: ID
  upvote: Boolean
  username: String
}

type Query {
  getCommentsList: [Comments]
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "comments"
      configuration: "postgresql_config"
    )
  """
  This query is an example of how to simply paginate your responses.
  """
  getPaginatedCommentsList(first: Int!, after: Int!): [Comments]
    @dbquery(
      type: "postgresql"
      query: """
      select * from "public"."comments" limit $1 offset $2
      """
      configuration: "postgresql_config"
    )
  """
  In this example, a single query parameter is passed. If the request to the DB will
  return at most one value you can remove the square brackets from the result.
  """
  getCommentsById(id: ID!): [Comments]
    @dbquery(
      type: "postgresql"
      query: """
      select * from "public"."comments" where "id" = $1
      """
      configuration: "postgresql_config"
    )
  """
  In this example, two query parameters are passed. If the request to the DB will
  return at most one value you can remove the square brackets from the result.
  """
  getCommentsByIdAndText(id: ID!, text: String!): [Comments]
    @dbquery(
      type: "postgresql"
      query: """
      select * from "public"."comments" where "id" = $1 and "text" = $2
      """
      configuration: "postgresql_config"
    )
  getPostList: [Post]
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "post"
      configuration: "postgresql_config"
    )
  getSubredditList: [Subreddit]
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "subreddit"
      configuration: "postgresql_config"
    )
  getSubredditListByTopic(topic: String): [Subreddit]
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      select * from "subreddit" where "topic" = $1
      """
      configuration: "postgresql_config"
    )
  getVoteList: [Vote]
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "vote"
      configuration: "postgresql_config"
    )
}

type Mutation {
  """
  In this mutation example you can see how to do a mutation to insert data in the database.
  """
  insertPost(
    image: String!
    created_at: DateTime!
    body: String!
    subraddit_id: ID!
    title: String!
    username: String!
  ): Post
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "post"
      dml: INSERT
      configuration: "postgresql_config"
    )

  insertSubreddit(topic: String): Subreddit
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "post"
      dml: INSERT
      configuration: "postgresql_config"
    )
  """
  In this mutation example you can see how to do a mutation to delete data from the database.
  """
  deletePost(
    image: String!
    created_at: DateTime!
    id: ID!
    body: String!
    subraddit_id: ID!
    title: String!
    username: String!
  ): Post
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "post"
      dml: DELETE
      configuration: "postgresql_config"
    )
}
